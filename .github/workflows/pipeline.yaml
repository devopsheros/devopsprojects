name: application

on:
  push:
    branches:
      - 'main'
  pull_request:
  workflow_dispatch:
    inputs:
      branches:
        description: 'Branch to deploy'
        required: true

jobs:
  infrastructure:
    name: 'terraform'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: init
        run: |
          cd terraform
          terraform init -backend-config="bucket=${{ secrets.BUCKETS_NAME }}" -backend-config="prefix=${{ secrets.BUCKET_PREFIX}}" -reconfigure
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: plan
        id: terraform_plan
        run: |
          cd terraform
          terraform plan -var-file=values.tfvars -var='key_path=${{ secrets.GOOGLE_CREDENTIALS }}' -lock=false
          echo ${{ steps.terraform_plan.outputs.stdout }}
          echo ${{ steps.terraform_plan.outputs.stderr }}
          echo ${{ steps.terraform_plan.outputs.exitcode }}
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      #- name: apply
      #  id: terraform_apply
      #  run: |
      #    cd terraform
      #    terraform apply  -var-file=values.tfvars -var='key_path=${{ secrets.GOOGLE_CREDENTIALS }}' -auto-approve -lock=false
      #    echo ${{ steps.terraform_apply.outputs.stdout }}
      #    echo ${{ steps.terraform_apply.outputs.stderr }}
      #    echo ${{ steps.terraform_apply.outputs.exitcode }}
      #  env:
      #    GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: devopsheros137/flight-app:1.0.1

      - id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Kubernetes
        run: | 
          gcloud config set project ${{ secrets.GCP_PROJECT }}
          gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }}
          gcloud components install kubectl
          
          kubectl config view
          kubectl create secret generic creds --from-literal=username=postgres --from-literal=password=${{ secrets.POSTGRS_PASS }} --from-literal=host=postgres --from-literal=db=postgres
          sleep 30
          kubectl apply -f ./k8s/postgres.yaml
          sleep 80
          kubectl exec -it postgres-0 echo "port = 5432" >> /var/lib/postgresql/data/pgdata/postgresql.conf
          sleep 15
          kubectl apply -f ./k8s/flask.yaml
          sleep 30
        
      - name: Deploy ingress nginx
        uses: deliverybot/helm@v1
        with:
          repo: https://kubernetes.github.io/ingress-nginx
          release: my-ingress-nginx
          namespace: ingress-nginx
          chart: ingress-nginx
        env:
          KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm install my-ingress-nginx ingress-nginx/ingress-nginx --version 4.6.1
          
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.12.0 --set installCRDs=true
          
          gcloud iam service-accounts create dns01-solver-pipe --display-name "dns01-solver"
          gcloud projects add-iam-policy-binding devops-project-387209 --member serviceAccount:dns01-solver-pipe@devops-project-387209.iam.gserviceaccount.com  --role roles/dns.admin
          gcloud iam service-accounts keys create key.json --iam-account dns01-solver-pipe@devops-project-387209.iam.gserviceaccount.com
          
          kubectl create secret generic dns-reslover-key --from-file=key.json=./key.json
          sleep 30
          
          kubectl apply -f issuer.yaml
          sleep 30
          kubectl apply -f ingress.yaml
          sleep 30
            
